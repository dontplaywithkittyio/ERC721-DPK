{
	"compiler": {
		"version": "0.8.7+commit.e28d00a7"
	},
	"language": "Solidity",
	"output": {
		"abi": [
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "g1",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "g2",
						"type": "uint256"
					}
				],
				"name": "_mix",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "gene1",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "gene2",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "_refactor",
						"type": "uint256"
					}
				],
				"name": "_mix_tool",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "g1",
						"type": "uint256"
					}
				],
				"name": "_mutate",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "_refactor",
						"type": "uint256"
					}
				],
				"name": "_random",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "isGeneConsole",
				"outputs": [
					{
						"internalType": "bool",
						"name": "",
						"type": "bool"
					}
				],
				"stateMutability": "pure",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "mixGene1",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "mixGene2",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "genes1",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "genes2",
						"type": "uint256"
					}
				],
				"name": "mixGenes",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "randMix",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [
					{
						"internalType": "uint256",
						"name": "momGene",
						"type": "uint256"
					},
					{
						"internalType": "uint256",
						"name": "dadGene",
						"type": "uint256"
					}
				],
				"name": "reproduce",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			},
			{
				"inputs": [],
				"name": "testReproduce",
				"outputs": [
					{
						"internalType": "uint256",
						"name": "",
						"type": "uint256"
					}
				],
				"stateMutability": "view",
				"type": "function"
			}
		],
		"devdoc": {
			"kind": "dev",
			"methods": {
				"_mix(uint256,uint256)": {
					"details": "mix genes by the mixture of 128 binary pairs"
				},
				"_mix_tool(uint256,uint256,uint256)": {
					"details": "genetical mixture by mapping with biological probablities"
				},
				"_mutate(uint256)": {
					"details": "mutate one/two/zero gene(s) randomly"
				},
				"mixGenes(uint256,uint256)": {
					"details": "given genes of kitten 1 & 2, return a genetic combination - may have a random factor",
					"params": {
						"genes1": "genes of mom",
						"genes2": "genes of sire"
					},
					"returns": {
						"_0": "the genes that are supposed to be passed down the child"
					}
				},
				"reproduce(uint256,uint256)": {
					"details": "call _mix and _mutate functions"
				}
			},
			"version": 1
		},
		"userdoc": {
			"kind": "user",
			"methods": {
				"_mix(uint256,uint256)": {
					"notice": "mix genes"
				},
				"_mix_tool(uint256,uint256,uint256)": {
					"notice": "genetic algorithm mixture for two binaries"
				},
				"_mutate(uint256)": {
					"notice": "mutate gene"
				},
				"_random(uint256)": {
					"notice": "CONSTANTS END"
				},
				"reproduce(uint256,uint256)": {
					"notice": "reproduce an offspring"
				}
			},
			"version": 1
		}
	},
	"settings": {
		"compilationTarget": {
			"contracts/token/ERC721/MultiplyNFT.sol": "GeneticConsole"
		},
		"evmVersion": "london",
		"libraries": {},
		"metadata": {
			"bytecodeHash": "ipfs"
		},
		"optimizer": {
			"enabled": false,
			"runs": 200
		},
		"remappings": []
	},
	"sources": {
		"contracts/access/Ownable.sol": {
			"keccak256": "0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1",
			"license": "MIT",
			"urls": [
				"bzz-raw://b2ebbbe6d0011175bd9e7268b83de3f9c2f9d8d4cbfbaef12aff977d7d727163",
				"dweb:/ipfs/Qmd5c7Vxtis9wzkDNhxwc6A2QT5H9xn9kfjhx7qx44vpro"
			]
		},
		"contracts/token/ERC721/MultiplyNFT.sol": {
			"keccak256": "0x49b9de83ce1c45f26680916d1b3797c2ed56eb4495ab02a0b0e29115fcfb1fbc",
			"urls": [
				"bzz-raw://7ededdf05ad6b38f2830691d1e6a8be2b6d12fccf51b56810d422708ca1d35fb",
				"dweb:/ipfs/QmQhpov5SSmS6qf7RMciR3XJ6r6KchsqteLS3hE3xF5r5z"
			]
		},
		"contracts/utils/Context.sol": {
			"keccak256": "0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f",
			"license": "MIT",
			"urls": [
				"bzz-raw://26e8b38a7ac8e7b4463af00cf7fff1bf48ae9875765bf4f7751e100124d0bc8c",
				"dweb:/ipfs/QmWcsmkVr24xmmjfnBQZoemFniXjj3vwT78Cz6uqZW1Hux"
			]
		},
		"contracts/utils/Strings.sol": {
			"keccak256": "0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d",
			"license": "MIT",
			"urls": [
				"bzz-raw://d636ba90bbbeed04a1ea7fe9ec2466757e30fd38ba2ca173636dbf69a518735e",
				"dweb:/ipfs/QmQwCB2BHnEuYR22PYt9HkpbgeFDhq4rHmaYqAZbX3WRC7"
			]
		}
	},
	"version": 1
}